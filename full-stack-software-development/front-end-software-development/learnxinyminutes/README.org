* scenic programming language tours

** html

   #+BEGIN_SRC html
     <!-- Comments are enclosed like this line! -->

     <!-- #################### The Tags #################### -->

     <!-- Here is an example HTML file that we are going to analyse. -->

     <!doctype html>
         <html>
             <head>
                 <title>My Site</title>
             </head>
             <body>
                 <h1>Hello, world!</h1>
                 <a href = "http://codepen.io/anon/pen/xwjLbZ">Come look at what this shows</a>
                 <p>This is a paragraph.</p>
                 <p>This is another paragraph.</p>
                 <ul>
                     <li>This is an item in a non-enumerated list (bullet list)</li>
                     <li>This is another item</li>
                     <li>And this is the last item on the list</li>
                 </ul>
             </body>
         </html>

     <!-- An HTML file always starts by indicating to the browser that the page is HTML. -->
     <!doctype html>

     <!-- After this, it starts by opening an <html> tag. -->
     <html>

     <!-- that will be closed at the end of the file with </html>. -->
     </html>

     <!-- Nothing should appear after this final tag. -->

     <!-- Inside (between the opening and closing tags <html></html>), we find: -->

     <!-- A header defined by <head> (it must be closed with </head>). -->
     <!-- The header contains some description and additional information which are not displayed; this is metadata. -->

     <head>
         <title>My Site</title><!-- The tag <title> indicates to the browser the title to show in browser window's title bar and tab name. -->
     </head>

     <!-- After the <head> section, we find the tag - <body> -->
     <!-- Until this point, nothing described will show up in the browser window. -->
     <!-- We must fill the body with the content to be displayed. -->

     <body>
         <h1>Hello, world!</h1> <!-- The h1 tag creates a title. -->
         <!-- There are also subtitles to <h1> from the most important (h2) to the most precise (h6). -->
         <a href = "http://codepen.io/anon/pen/xwjLbZ">Come look at what this shows</a> <!-- a hyperlink to the url given by the attribute href="" -->
         <p>This is a paragraph.</p> <!-- The tag <p> lets us include text in the html page. -->
         <p>This is another paragraph.</p>
         <ul> <!-- The tag <ul> creates a bullet list. -->
         <!-- To have a numbered list instead we would use <ol> giving 1. for the first element, 2. for the second, etc. -->
             <li>This is an item in a non-enumerated list (bullet list)</li>
             <li>This is another item</li>
             <li>And this is the last item on the list</li>
         </ul>
     </body>

     <!-- And that's it, creating an HTML file can be simple. -->

     <!-- But it is possible to add many additional types of HTML tags. -->

     <!-- To insert an image. -->
     <img src="http://i.imgur.com/XWG0O.gif"/> <!-- The source of the image is indicated using the attribute src="" -->
     <!-- The source can be an URL or even path to a file on your computer. -->

     <!-- It is also possible to create a table. -->

     <table> <!-- We open a <table> element. -->
         <tr> <!-- <tr> allows us to create a row. -->
             <th>First Header</th> <!-- <th> allows us to give a title to a table column. -->
             <th>Second Header</th>
         </tr>
         <tr>
             <td>first row, first column</td> <!-- <td> allows us to create a table cell. -->
             <td>first row, second column</td>
         </tr>
         <tr>
             <td>second row, first column</td>
             <td>second row, second column</td>
         </tr>
     </table>
   #+END_SRC

** css

*** syntax

    #+BEGIN_SRC css
      /* comments appear inside slash-asterisk, just like this line!
         there are no "one-line comments"; this is the only comment style */

      /* ####################
         ## SELECTORS
         #################### */

      /* the selector is used to target an element on a page. */
      selector { property: value; /* more properties...*/ }

      /*
      Here is an example element:

      <div class='class1 class2' id='anID' attr='value' otherAttr='en-us foo bar' />
      ,*/

      /* You can target it using one of its CSS classes */
      .class1 { }

      /* or both classes! */
      .class1.class2 { }

      /* or its name */
      div { }

      /* or its id */
      #anID { }

      /* or using the fact that it has an attribute! */
      [attr] { font-size:smaller; }

      /* or that the attribute has a specific value */
      [attr='value'] { font-size:smaller; }

      /* starts with a value (CSS 3) */
      [attr^='val'] { font-size:smaller; }

      /* or ends with a value (CSS 3) */
      [attr$='ue'] { font-size:smaller; }

      /* or contains a value in a space-separated list */
      [otherAttr~='foo'] { }
      [otherAttr~='bar'] { }

      /* or contains a value in a dash-separated list, e.g., "-" (U+002D) */
      [otherAttr|='en'] { font-size:smaller; }

      /* You can combine different selectors to create a more focused selector. Don't
         put spaces between them. */
      div.some-class[attr$='ue'] { }

      /* You can select an element which is a child of another element */
      div.some-parent > .class-name { }

      /* or a descendant of another element. Children are the direct descendants of
         their parent element, only one level down the tree. Descendants can be any
         level down the tree. */
      div.some-parent .class-name { }

      /* Warning: the same selector without a space has another meaning.
         Can you guess what? */
      div.some-parent.class-name { }

      /* You may also select an element based on its adjacent sibling */
      .i-am-just-before + .this-element { }

      /* or any sibling preceding it */
      .i-am-any-element-before ~ .this-element { }

      /* There are some selectors called pseudo classes that can be used to select an
         element only when it is in a particular state */

      /* for example, when the cursor hovers over an element */
      selector:hover { }

      /* or a link has been visited */
      selector:visited { }

      /* or hasn't been visited */
      selected:link { }

      /* or an element is in focus */
      selected:focus { }

      /* any element that is the first child of its parent */
      selector:first-child {}

      /* any element that is the last child of its parent */
      selector:last-child {}

      /* Just like pseudo classes, pseudo elements allow you to style certain parts of
          a document  */

      /* matches a virtual first child of the selected element */
      selector::before {}

      /* matches a virtual last child of the selected element */
      selector::after {}

      /* At appropriate places, an asterisk may be used as a wildcard to select every
         element */
      ,* { } /* all elements */
      .parent * { } /* all descendants */
      .parent > * { } /* all children */

      /* Group any number of selectors to define styles that affect all selectors
         in the group */
      selector1, selector2 { }

      /* ####################
         ## PROPERTIES
         #################### */

      selector {

          /* Units of length can be absolute or relative. */

          /* Relative units */
          width: 50%;       /* percentage of parent element width */
          font-size: 2em;   /* multiples of element's original font-size */
          font-size: 2rem;  /* or the root element's font-size */
          font-size: 2vw;   /* multiples of 1% of the viewport's width (CSS 3) */
          font-size: 2vh;   /* or its height */
          font-size: 2vmin; /* whichever of a vh or a vw is smaller */
          font-size: 2vmax; /* or greater */

          /* Absolute units */
          width: 200px;     /* pixels */
          font-size: 20pt;  /* points */
          width: 5cm;       /* centimeters */
          min-width: 50mm;  /* millimeters */
          max-width: 5in;   /* inches */

          /* Colors */
          color: #F6E;                 /* short hex format */
          color: #FF66EE;              /* long hex format */
          color: tomato;               /* a named color */
          color: rgb(255, 255, 255);   /* as rgb values */
          color: rgb(10%, 20%, 50%);   /* as rgb percentages */
          color: rgba(255, 0, 0, 0.3); /* as rgba values (CSS 3) Note: 0 <= a <= 1 */
          color: transparent;          /* equivalent to setting the alpha to 0 */
          color: hsl(0, 100%, 50%);    /* as hsl percentages (CSS 3) */
          color: hsla(0, 100%, 50%, 0.3); /* as hsl percentages with alpha */

          /* Borders */
          border-width:5px;
          border-style:solid;
          border-color:red;      /* similar to how background-color is set */
          border: 5px solid red; /* this is a short hand approach for the same */
          border-radius:20px;    /* this is a CSS3 property */

          /* Images as backgrounds of elements */
          background-image: url(/img-path/img.jpg); /* quotes inside url() optional */

          /* Fonts */
          font-family: Arial;
          /* if the font family name has a space, it must be quoted */
          font-family: "Courier New";
          /* if the first one is not found, the browser uses the next, and so on */
          font-family: "Courier New", Trebuchet, Arial, sans-serif;
      }
    #+END_SRC

*** usage

    #+BEGIN_SRC html
      <!-- You need to include the css file in your page's <head>. This is the
           recommended method. Refer to http://stackoverflow.com/questions/8284365 -->
      <link rel='stylesheet' type='text/css' href='path/to/style.css'>

      <!-- You can also include some CSS inline in your markup. -->
      <style>
         a { color: purple; }
      </style>

      <!-- Or directly set CSS properties on the element. -->
      <div style="border: 1px solid red;">
      </div>
    #+END_SRC

*** precedence or cascade

    #+BEGIN_SRC css
      /* A */
      p.class1[attr='value']

      /* B */
      p.class1 { }

      /* C */
      p.class2 { }

      /* D */
      p { }

      /* E */
      p { property: value !important; }
    #+END_SRC

    #+BEGIN_SRC html
      <p style='/*F*/ property:value;' class='class1 class2' attr='value'>
    #+END_SRC

    - E has the highest precedence because of the keyword !important. It is recommended that you avoid its usage.
    - F is next, because it is an inline style.
    - A is next, because it is more “specific” than anything else. It has 3 specifiers: The name of the element p, its class class1, an attribute attr='value'.
    - C is next, even though it has the same specificity as B. This is because it appears after B.
    - B is next.
    - D is the last one.

*** media queries

    #+BEGIN_SRC css
      /* A rule that will be used on all devices */
      h1 {
          font-size: 2em;
          color: white;
          background-color: black;
      }

      /* change the h1 to use less ink on a printer */
      @media print {
          h1 {
              color: black;
              background-color: white;
          }
      }

      /* make the font bigger when shown on a screen at least 480px wide */
      @media screen and (min-width: 480px) {
          h1 {
              font-size: 3em;
              font-weight: normal;
          }
      }
    #+END_SRC

    #+BEGIN_SRC html
      <head>
        <meta name="viewport" content="width=device-width; initial-scale=1.0">
      </head>
    #+END_SRC

** javascript

   #+BEGIN_SRC javascript
     // Single-line comments start with two slashes.
     /* Multiline comments start with slash-star,
        and end with star-slash */

     // Statements can be terminated by ;
     doStuff();

     // ... but they don't have to be, as semicolons are automatically inserted
     // wherever there's a newline, except in certain cases.
     doStuff()

     // Because those cases can cause unexpected results, we'll keep on using
     // semicolons in this guide.

     ///////////////////////////////////
     // 1. Numbers, Strings and Operators

     // JavaScript has one number type (which is a 64-bit IEEE 754 double).
     // Doubles have a 52-bit mantissa, which is enough to store integers
     // up to about 9✕10¹⁵ precisely.
     3; // = 3
     1.5; // = 1.5

     // Some basic arithmetic works as you'd expect.
     1 + 1; // = 2
     0.1 + 0.2; // = 0.30000000000000004
     8 - 1; // = 7
     10 * 2; // = 20
     35 / 5; // = 7

     // Including uneven division.
     5 / 2; // = 2.5

     // And modulo division.
     10 % 2; // = 0
     30 % 4; // = 2
     18.5 % 7; // = 4.5

     // Bitwise operations also work; when you perform a bitwise operation your float
     // is converted to a signed int *up to* 32 bits.
     1 << 2; // = 4

     // Precedence is enforced with parentheses.
     (1 + 3) * 2; // = 8

     // There are three special not-a-real-number values:
     Infinity; // result of e.g. 1/0
     -Infinity; // result of e.g. -1/0
     NaN; // result of e.g. 0/0, stands for 'Not a Number'

     // There's also a boolean type.
     true;
     false;

     // Strings are created with ' or ".
     'abc';
     "Hello, world";

     // Negation uses the ! symbol
     !true; // = false
     !false; // = true

     // Equality is ===
     1 === 1; // = true
     2 === 1; // = false

     // Inequality is !==
     1 !== 1; // = false
     2 !== 1; // = true

     // More comparisons
     1 < 10; // = true
     1 > 10; // = false
     2 <= 2; // = true
     2 >= 2; // = true

     // Strings are concatenated with +
     "Hello " + "world!"; // = "Hello world!"

     // ... which works with more than just strings
     "1, 2, " + 3; // = "1, 2, 3"
     "Hello " + ["world", "!"]; // = "Hello world,!"

     // and are compared with < and >
     "a" < "b"; // = true

     // Type coercion is performed for comparisons with double equals...
     "5" == 5; // = true
     null == undefined; // = true

     // ...unless you use ===
     "5" === 5; // = false
     null === undefined; // = false

     // ...which can result in some weird behaviour...
     13 + !0; // 14
     "13" + !0; // '13true'

     // You can access characters in a string with `charAt`
     "This is a string".charAt(0);  // = 'T'

     // ...or use `substring` to get larger pieces.
     "Hello world".substring(0, 5); // = "Hello"

     // `length` is a property, so don't use ().
     "Hello".length; // = 5

     // There's also `null` and `undefined`.
     null;      // used to indicate a deliberate non-value
     undefined; // used to indicate a value is not currently present (although
                // `undefined` is actually a value itself)

     // false, null, undefined, NaN, 0 and "" are falsy; everything else is truthy.
     // Note that 0 is falsy and "0" is truthy, even though 0 == "0".

     ///////////////////////////////////
     // 2. Variables, Arrays and Objects

     // Variables are declared with the `var` keyword. JavaScript is dynamically
     // typed, so you don't need to specify type. Assignment uses a single `=`
     // character.
     var someVar = 5;

     // If you leave the var keyword off, you won't get an error...
     someOtherVar = 10;

     // ...but your variable will be created in the global scope, not in the scope
     // you defined it in.

     // Variables declared without being assigned to are set to undefined.
     var someThirdVar; // = undefined

     // If you want to declare a couple of variables, then you could use a comma
     // separator
     var someFourthVar = 2, someFifthVar = 4;

     // There's shorthand for performing math operations on variables:
     someVar += 5; // equivalent to someVar = someVar + 5; someVar is 10 now
     someVar *= 10; // now someVar is 100

     // and an even-shorter-hand for adding or subtracting 1
     someVar++; // now someVar is 101
     someVar--; // back to 100

     // Arrays are ordered lists of values, of any type.
     var myArray = ["Hello", 45, true];

     // Their members can be accessed using the square-brackets subscript syntax.
     // Array indices start at zero.
     myArray[1]; // = 45

     // Arrays are mutable and of variable length.
     myArray.push("World");
     myArray.length; // = 4

     // Add/Modify at specific index
     myArray[3] = "Hello";

     // Add and remove element from front or back end of an array
     myArray.unshift(3); // Add as the first element
     someVar = myArray.shift(); // Remove first element and return it
     myArray.push(3); // Add as the last element
     someVar = myArray.pop(); // Remove last element and return it

     // Join all elements of an array with semicolon
     var myArray0 = [32,false,"js",12,56,90];
     myArray0.join(";") // = "32;false;js;12;56;90"

     // Get subarray of elements from index 1 (include) to 4 (exclude)
     myArray0.slice(1,4); // = [false,"js",12]

     // Remove 4 elements starting from index 2, and insert there strings
     // "hi","wr" and "ld"; return removed subarray
     myArray0.splice(2,4,"hi","wr","ld"); // = ["js",12,56,90]
     // myArray0 === [32,false,"hi","wr","ld"]

     // JavaScript's objects are equivalent to "dictionaries" or "maps" in other
     // languages: an unordered collection of key-value pairs.
     var myObj = {key1: "Hello", key2: "World"};

     // Keys are strings, but quotes aren't required if they're a valid
     // JavaScript identifier. Values can be any type.
     var myObj = {myKey: "myValue", "my other key": 4};

     // Object attributes can also be accessed using the subscript syntax,
     myObj["my other key"]; // = 4

     // ... or using the dot syntax, provided the key is a valid identifier.
     myObj.myKey; // = "myValue"

     // Objects are mutable; values can be changed and new keys added.
     myObj.myThirdKey = true;

     // If you try to access a value that's not yet set, you'll get undefined.
     myObj.myFourthKey; // = undefined

     ///////////////////////////////////
     // 3. Logic and Control Structures

     // The `if` structure works as you'd expect.
     var count = 1;
     if (count == 3){
         // evaluated if count is 3
     } else if (count == 4){
         // evaluated if count is 4
     } else {
         // evaluated if it's not either 3 or 4
     }

     // As does `while`.
     while (true){
         // An infinite loop!
     }

     // Do-while loops are like while loops, except they always run at least once.
     var input;
     do {
         input = getInput();
     } while (!isValid(input));

     // The `for` loop is the same as C and Java:
     // initialization; continue condition; iteration.
     for (var i = 0; i < 5; i++){
         // will run 5 times
     }

     // Breaking out of labeled loops is similar to Java
     outer:
     for (var i = 0; i < 10; i++) {
         for (var j = 0; j < 10; j++) {
             if (i == 5 && j ==5) {
                 break outer;
                 // breaks out of outer loop instead of only the inner one
             }
         }
     }

     // The for/in statement allows iteration over properties of an object.
     var description = "";
     var person = {fname:"Paul", lname:"Ken", age:18};
     for (var x in person){
         description += person[x] + " ";
     } // description = 'Paul Ken 18 '

     // The for/of statement allows iteration over iterable objects (including the built-in String,
     // Array, e.g. the Array-like arguments or NodeList objects, TypedArray, Map and Set,
     // and user-defined iterables).
     var myPets = "";
     var pets = ["cat", "dog", "hamster", "hedgehog"];
     for (var pet of pets){
         myPets += pet + " ";
     } // myPets = 'cat dog hamster hedgehog '

     // && is logical and, || is logical or
     if (house.size == "big" && house.colour == "blue"){
         house.contains = "bear";
     }
     if (colour == "red" || colour == "blue"){
         // colour is either red or blue
     }

     // && and || "short circuit", which is useful for setting default values.
     var name = otherName || "default";

     // The `switch` statement checks for equality with `===`.
     // Use 'break' after each case
     // or the cases after the correct one will be executed too.
     grade = 'B';
     switch (grade) {
       case 'A':
         console.log("Great job");
         break;
       case 'B':
         console.log("OK job");
         break;
       case 'C':
         console.log("You can do better");
         break;
       default:
         console.log("Oy vey");
         break;
     }

     ///////////////////////////////////
     // 4. Functions, Scope and Closures

     // JavaScript functions are declared with the `function` keyword.
     function myFunction(thing){
         return thing.toUpperCase();
     }
     myFunction("foo"); // = "FOO"

     // Note that the value to be returned must start on the same line as the
     // `return` keyword, otherwise you'll always return `undefined` due to
     // automatic semicolon insertion. Watch out for this when using Allman style.
     function myFunction(){
         return // <- semicolon automatically inserted here
         {thisIsAn: 'object literal'};
     }
     myFunction(); // = undefined

     // JavaScript functions are first class objects, so they can be reassigned to
     // different variable names and passed to other functions as arguments - for
     // example, when supplying an event handler:
     function myFunction(){
         // this code will be called in 5 seconds' time
     }
     setTimeout(myFunction, 5000);
     // Note: setTimeout isn't part of the JS language, but is provided by browsers
     // and Node.js.

     // Another function provided by browsers is setInterval
     function myFunction(){
         // this code will be called every 5 seconds
     }
     setInterval(myFunction, 5000);

     // Function objects don't even have to be declared with a name - you can write
     // an anonymous function definition directly into the arguments of another.
     setTimeout(function(){
         // this code will be called in 5 seconds' time
     }, 5000);

     // JavaScript has function scope; functions get their own scope but other blocks
     // do not.
     if (true){
         var i = 5;
     }
     i; // = 5 - not undefined as you'd expect in a block-scoped language

     // This has led to a common pattern of "immediately-executing anonymous
     // functions", which prevent temporary variables from leaking into the global
     // scope.
     (function(){
         var temporary = 5;
         // We can access the global scope by assigning to the "global object", which
         // in a web browser is always `window`. The global object may have a
         // different name in non-browser environments such as Node.js.
         window.permanent = 10;
     })();
     temporary; // raises ReferenceError
     permanent; // = 10

     // One of JavaScript's most powerful features is closures. If a function is
     // defined inside another function, the inner function has access to all the
     // outer function's variables, even after the outer function exits.
     function sayHelloInFiveSeconds(name){
         var prompt = "Hello, " + name + "!";
         // Inner functions are put in the local scope by default, as if they were
         // declared with `var`.
         function inner(){
             alert(prompt);
         }
         setTimeout(inner, 5000);
         // setTimeout is asynchronous, so the sayHelloInFiveSeconds function will
         // exit immediately, and setTimeout will call inner afterwards. However,
         // because inner is "closed over" sayHelloInFiveSeconds, inner still has
         // access to the `prompt` variable when it is finally called.
     }
     sayHelloInFiveSeconds("Adam"); // will open a popup with "Hello, Adam!" in 5s

     ///////////////////////////////////
     // 5. More about Objects; Constructors and Prototypes

     // Objects can contain functions.
     var myObj = {
         myFunc: function(){
             return "Hello world!";
         }
     };
     myObj.myFunc(); // = "Hello world!"

     // When functions attached to an object are called, they can access the object
     // they're attached to using the `this` keyword.
     myObj = {
         myString: "Hello world!",
         myFunc: function(){
             return this.myString;
         }
     };
     myObj.myFunc(); // = "Hello world!"

     // What this is set to has to do with how the function is called, not where
     // it's defined. So, our function doesn't work if it isn't called in the
     // context of the object.
     var myFunc = myObj.myFunc;
     myFunc(); // = undefined

     // Inversely, a function can be assigned to the object and gain access to it
     // through `this`, even if it wasn't attached when it was defined.
     var myOtherFunc = function(){
         return this.myString.toUpperCase();
     };
     myObj.myOtherFunc = myOtherFunc;
     myObj.myOtherFunc(); // = "HELLO WORLD!"

     // We can also specify a context for a function to execute in when we invoke it
     // using `call` or `apply`.

     var anotherFunc = function(s){
         return this.myString + s;
     };
     anotherFunc.call(myObj, " And Hello Moon!"); // = "Hello World! And Hello Moon!"

     // The `apply` function is nearly identical, but takes an array for an argument
     // list.

     anotherFunc.apply(myObj, [" And Hello Sun!"]); // = "Hello World! And Hello Sun!"

     // This is useful when working with a function that accepts a sequence of
     // arguments and you want to pass an array.

     Math.min(42, 6, 27); // = 6
     Math.min([42, 6, 27]); // = NaN (uh-oh!)
     Math.min.apply(Math, [42, 6, 27]); // = 6

     // But, `call` and `apply` are only temporary. When we want it to stick, we can
     // use `bind`.

     var boundFunc = anotherFunc.bind(myObj);
     boundFunc(" And Hello Saturn!"); // = "Hello World! And Hello Saturn!"

     // `bind` can also be used to partially apply (curry) a function.

     var product = function(a, b){ return a * b; };
     var doubler = product.bind(this, 2);
     doubler(8); // = 16

     // When you call a function with the `new` keyword, a new object is created, and
     // made available to the function via the `this` keyword. Functions designed to be
     // called like that are called constructors.

     var MyConstructor = function(){
         this.myNumber = 5;
     };
     myNewObj = new MyConstructor(); // = {myNumber: 5}
     myNewObj.myNumber; // = 5

     // Unlike most other popular object-oriented languages, JavaScript has no
     // concept of 'instances' created from 'class' blueprints; instead, JavaScript
     // combines instantiation and inheritance into a single concept: a 'prototype'.

     // Every JavaScript object has a 'prototype'. When you go to access a property
     // on an object that doesn't exist on the actual object, the interpreter will
     // look at its prototype.

     // Some JS implementations let you access an object's prototype on the magic
     // property `__proto__`. While this is useful for explaining prototypes it's not
     // part of the standard; we'll get to standard ways of using prototypes later.
     var myObj = {
         myString: "Hello world!"
     };
     var myPrototype = {
         meaningOfLife: 42,
         myFunc: function(){
             return this.myString.toLowerCase();
         }
     };

     myObj.__proto__ = myPrototype;
     myObj.meaningOfLife; // = 42

     // This works for functions, too.
     myObj.myFunc(); // = "hello world!"

     // Of course, if your property isn't on your prototype, the prototype's
     // prototype is searched, and so on.
     myPrototype.__proto__ = {
         myBoolean: true
     };
     myObj.myBoolean; // = true

     // There's no copying involved here; each object stores a reference to its
     // prototype. This means we can alter the prototype and our changes will be
     // reflected everywhere.
     myPrototype.meaningOfLife = 43;
     myObj.meaningOfLife; // = 43

     // The for/in statement allows iteration over properties of an object,
     // walking up the prototype chain until it sees a null prototype.
     for (var x in myObj){
         console.log(myObj[x]);
     }
     ///prints:
     // Hello world!
     // 43
     // [Function: myFunc]

     // To only consider properties attached to the object itself
     // and not its prototypes, use the `hasOwnProperty()` check.
     for (var x in myObj){
         if (myObj.hasOwnProperty(x)){
             console.log(myObj[x]);
         }
     }
     ///prints:
     // Hello world!

     // We mentioned that `__proto__` was non-standard, and there's no standard way to
     // change the prototype of an existing object. However, there are two ways to
     // create a new object with a given prototype.

     // The first is Object.create, which is a recent addition to JS, and therefore
     // not available in all implementations yet.
     var myObj = Object.create(myPrototype);
     myObj.meaningOfLife; // = 43

     // The second way, which works anywhere, has to do with constructors.
     // Constructors have a property called prototype. This is *not* the prototype of
     // the constructor function itself; instead, it's the prototype that new objects
     // are given when they're created with that constructor and the new keyword.
     MyConstructor.prototype = {
         myNumber: 5,
         getMyNumber: function(){
             return this.myNumber;
         }
     };
     var myNewObj2 = new MyConstructor();
     myNewObj2.getMyNumber(); // = 5
     myNewObj2.myNumber = 6;
     myNewObj2.getMyNumber(); // = 6

     // Built-in types like strings and numbers also have constructors that create
     // equivalent wrapper objects.
     var myNumber = 12;
     var myNumberObj = new Number(12);
     myNumber == myNumberObj; // = true

     // Except, they aren't exactly equivalent.
     typeof myNumber; // = 'number'
     typeof myNumberObj; // = 'object'
     myNumber === myNumberObj; // = false
     if (0){
         // This code won't execute, because 0 is falsy.
     }
     if (new Number(0)){
        // This code will execute, because wrapped numbers are objects, and objects
        // are always truthy.
     }

     // However, the wrapper objects and the regular builtins share a prototype, so
     // you can actually add functionality to a string, for instance.
     String.prototype.firstCharacter = function(){
         return this.charAt(0);
     };
     "abc".firstCharacter(); // = "a"

     // This fact is often used in "polyfilling", which is implementing newer
     // features of JavaScript in an older subset of JavaScript, so that they can be
     // used in older environments such as outdated browsers.

     // For instance, we mentioned that Object.create isn't yet available in all
     // implementations, but we can still use it with this polyfill:
     if (Object.create === undefined){ // don't overwrite it if it exists
         Object.create = function(proto){
             // make a temporary constructor with the right prototype
             var Constructor = function(){};
             Constructor.prototype = proto;
             // then use it to create a new, appropriately-prototyped object
             return new Constructor();
         };
     }
   #+END_SRC

** typescript

   #+BEGIN_SRC typescript
     // There are 3 basic types in TypeScript
     let isDone: boolean = false;
     let lines: number = 42;
     let name: string = "Anders";

     // But you can omit the type annotation if the variables are derived from explicit literals
     let isDone = false;
     let lines = 42;
     let name = "Anders";

     // When it's impossible to know, there is the "Any" type
     let notSure: any = 4;
     notSure = "maybe a string instead";
     notSure = false; // okay, definitely a boolean

     // Use const keyword for constants
     const numLivesForCat = 9;
     numLivesForCat = 1; // Error

     // For collections, there are typed arrays and generic arrays
     let list: number[] = [1, 2, 3];
     // Alternatively, using the generic array type
     let list: Array<number> = [1, 2, 3];

     // For enumerations:
     enum Color { Red, Green, Blue };
     let c: Color = Color.Green;

     // Lastly, "void" is used in the special case of a function returning nothing
     function bigHorribleAlert(): void {
       alert("I'm a little annoying box!");
     }

     // Functions are first class citizens, support the lambda "fat arrow" syntax and
     // use type inference

     // The following are equivalent, the same signature will be inferred by the
     // compiler, and same JavaScript will be emitted
     let f1 = function (i: number): number { return i * i; }
     // Return type inferred
     let f2 = function (i: number) { return i * i; }
     // "Fat arrow" syntax
     let f3 = (i: number): number => { return i * i; }
     // "Fat arrow" syntax with return type inferred
     let f4 = (i: number) => { return i * i; }
     // "Fat arrow" syntax with return type inferred, braceless means no return
     // keyword needed
     let f5 = (i: number) => i * i;

     // Interfaces are structural, anything that has the properties is compliant with
     // the interface
     interface Person {
       name: string;
       // Optional properties, marked with a "?"
       age?: number;
       // And of course functions
       move(): void;
     }

     // Object that implements the "Person" interface
     // Can be treated as a Person since it has the name and move properties
     let p: Person = { name: "Bobby", move: () => { } };
     // Objects that have the optional property:
     let validPerson: Person = { name: "Bobby", age: 42, move: () => { } };
     // Is not a person because age is not a number
     let invalidPerson: Person = { name: "Bobby", age: true };

     // Interfaces can also describe a function type
     interface SearchFunc {
       (source: string, subString: string): boolean;
     }
     // Only the parameters' types are important, names are not important.
     let mySearch: SearchFunc;
     mySearch = function (src: string, sub: string) {
       return src.search(sub) != -1;
     }

     // Classes - members are public by default
     class Point {
       // Properties
       x: number;

       // Constructor - the public/private keywords in this context will generate
       // the boiler plate code for the property and the initialization in the
       // constructor.
       // In this example, "y" will be defined just like "x" is, but with less code
       // Default values are also supported

       constructor(x: number, public y: number = 0) {
         this.x = x;
       }

       // Functions
       dist() { return Math.sqrt(this.x * this.x + this.y * this.y); }

       // Static members
       static origin = new Point(0, 0);
     }

     // Classes can be explicitly marked as implementing an interface.
     // Any missing properties will then cause an error at compile-time.
     class PointPerson implements Person {
         name: string
         move() {}
     }

     let p1 = new Point(10, 20);
     let p2 = new Point(25); //y will be 0

     // Inheritance
     class Point3D extends Point {
       constructor(x: number, y: number, public z: number = 0) {
         super(x, y); // Explicit call to the super class constructor is mandatory
       }

       // Overwrite
       dist() {
         let d = super.dist();
         return Math.sqrt(d * d + this.z * this.z);
       }
     }

     // Modules, "." can be used as separator for sub modules
     module Geometry {
       export class Square {
         constructor(public sideLength: number = 0) {
         }
         area() {
           return Math.pow(this.sideLength, 2);
         }
       }
     }

     let s1 = new Geometry.Square(5);

     // Local alias for referencing a module
     import G = Geometry;

     let s2 = new G.Square(10);

     // Generics
     // Classes
     class Tuple<T1, T2> {
       constructor(public item1: T1, public item2: T2) {
       }
     }

     // Interfaces
     interface Pair<T> {
       item1: T;
       item2: T;
     }

     // And functions
     let pairToTuple = function <T>(p: Pair<T>) {
       return new Tuple(p.item1, p.item2);
     };

     let tuple = pairToTuple({ item1: "hello", item2: "world" });

     // Including references to a definition file:
     /// <reference path="jquery.d.ts" />

     // Template Strings (strings that use backticks)
     // String Interpolation with Template Strings
     let name = 'Tyrone';
     let greeting = `Hi ${name}, how are you?`
     // Multiline Strings with Template Strings
     let multiline = `This is an example
     of a multiline string`;

     // READONLY: New Feature in TypeScript 3.1
     interface Person {
       readonly name: string;
       readonly age: number;
     }

     var p1: Person = { name: "Tyrone", age: 42 };
     p1.age = 25; // Error, p1.x is read-only

     var p2 = { name: "John", age: 60 };
     var p3: Person = p2; // Ok, read-only alias for p2
     p3.x = 35; // Error, p3.x is read-only
     p2.x = 45; // Ok, but also changes p3.x because of aliasing

     class Car {
       readonly make: string;
       readonly model: string;
       readonly year = 2018;

       constructor() {
         this.make = "Unknown Make"; // Assignment permitted in constructor
         this.model = "Unknown Model"; // Assignment permitted in constructor
       }
     }

     let numbers: Array<number> = [0, 1, 2, 3, 4];
     let moreNumbers: ReadonlyArray<number> = numbers;
     moreNumbers[5] = 5; // Error, elements are read-only
     moreNumbers.push(5); // Error, no push method (because it mutates array)
     moreNumbers.length = 3; // Error, length is read-only
     numbers = moreNumbers; // Error, mutating methods are missing
   #+END_SRC

** sass

   #+BEGIN_SRC scss
     //Single line comments are removed when Sass is compiled to CSS.

     /* Multi line comments are preserved. */

     /* Variables
     ============================== */

     /* You can store a CSS value (such as a color) in a variable.
     Use the '$' symbol to create a variable. */

     $primary-color: #A3A4FF;
     $secondary-color: #51527F;
     $body-font: 'Roboto', sans-serif;

     /* You can use the variables throughout your stylesheet.
     Now if you want to change a color, you only have to make the change once. */

     body {
         background-color: $primary-color;
         color: $secondary-color;
         font-family: $body-font;
     }

     /* This would compile to: */
     body {
         background-color: #A3A4FF;
         color: #51527F;
         font-family: 'Roboto', sans-serif;
     }

     /* This is much more maintainable than having to change the color
     each time it appears throughout your stylesheet. */

     /* Control Directives
     ============================== */

     /* Sass lets you use @if, @else, @for, @while, and @each to control the
        compilation of your code to CSS. */

     /* @if/@else blocks behave exactly as you might expect */

     $debug: true !default;

     @mixin debugmode {
         @if $debug {
             @debug "Debug mode enabled";

             display: inline-block;
         }
         @else {
             display: none;
         }
     }

     .info {
         @include debugmode;
     }

     /* If $debug is set to true, .info is displayed; if it's set to false then
     .info is not displayed.

     Note: @debug will output debugging information to the command line.
     Useful for checking variables while debugging your SCSS. */

     .info {
         display: inline-block;
     }

     /* @for is a control loop that iterates through a range of values.
     Particularly useful for setting styles on a collection of items.
     There are two forms, "through" and "to". The former includes the last value,
     the latter stops at the last value. */

     @for $c from 1 to 4 {
         div:nth-of-type(#{$c}) {
             left: ($c - 1) * 900 / 3;
         }
     }

     @for $c from 1 through 3 {
         .myclass-#{$c} {
             color: rgb($c * 255 / 3, $c * 255 / 3, $c * 255 / 3);
         }
     }

     /* Will compile to: */

     div:nth-of-type(1) {
         left: 0;
     }

     div:nth-of-type(2) {
         left: 300;
     }

     div:nth-of-type(3) {
         left: 600;
     }

     .myclass-1 {
         color: #555555;
     }

     .myclass-2 {
         color: #aaaaaa;
     }

     .myclass-3 {
         color: white;
     // SASS automatically converts #FFFFFF to white
     }

     /* @while is very straightforward: */

     $columns: 4;
     $column-width: 80px;

     @while $columns > 0 {
         .col-#{$columns} {
             width: $column-width;
             left: $column-width * ($columns - 1);
         }

         $columns: $columns - 1;
     }

     /* Will output the following CSS: */

     .col-4 {
         width: 80px;
         left: 240px;
     }

     .col-3 {
         width: 80px;
         left: 160px;
     }

     .col-2 {
         width: 80px;
         left: 80px;
     }

     .col-1 {
         width: 80px;
         left: 0px;
     }

     /* @each functions like @for, except using a list instead of ordinal values
     Note: you specify lists just like other variables, with spaces as
     delimiters. */

     $social-links: facebook twitter linkedin reddit;

     .social-links {
         @each $sm in $social-links {
             .icon-#{$sm} {
                 background-image: url("images/#{$sm}.png");
             }
         }
     }

     /* Which will output: */

     .social-links .icon-facebook {
         background-image: url("images/facebook.png");
     }

     .social-links .icon-twitter {
         background-image: url("images/twitter.png");
     }

     .social-links .icon-linkedin {
         background-image: url("images/linkedin.png");
     }

     .social-links .icon-reddit {
         background-image: url("images/reddit.png");
     }

     /* Mixins
     ==============================*/

     /* If you find you are writing the same code for more than one
     element, you might want to store that code in a mixin.

     Use the '@mixin' directive, plus a name for your mixin. */

     @mixin center {
         display: block;
         margin-left: auto;
         margin-right: auto;
         left: 0;
         right: 0;
     }

     /* You can use the mixin with '@include' and the mixin name. */

     div {
         @include center;
         background-color: $primary-color;
     }

     /* Which would compile to: */
     div {
         display: block;
         margin-left: auto;
         margin-right: auto;
         left: 0;
         right: 0;
         background-color: #A3A4FF;
     }

     /* You can use mixins to create a shorthand property. */

     @mixin size($width, $height) {
         width: $width;
         height: $height;
     }

     /* Which you can invoke by passing width and height arguments. */

     .rectangle {
         @include size(100px, 60px);
     }

     .square {
         @include size(40px, 40px);
     }

     /* Compiles to: */
     .rectangle {
       width: 100px;
       height: 60px;
     }

     .square {
       width: 40px;
       height: 40px;
     }

     /* Functions
     ============================== */

     /* Sass provides functions that can be used to accomplish a variety of
        tasks. Consider the following */

     /* Functions can be invoked by using their name and passing in the
        required arguments */
     body {
       width: round(10.25px);
     }

     .footer {
       background-color: fade_out(#000000, 0.25);
     }

     /* Compiles to: */

     body {
       width: 10px;
     }

     .footer {
       background-color: rgba(0, 0, 0, 0.75);
     }

     /* You may also define your own functions. Functions are very similar to
        mixins. When trying to choose between a function or a mixin, remember
        that mixins are best for generating CSS while functions are better for
        logic that might be used throughout your Sass code. The examples in
        the 'Math Operators' section are ideal candidates for becoming a reusable
        function. */

     /* This function will take a target size and the parent size and calculate
        and return the percentage */

     @function calculate-percentage($target-size, $parent-size) {
       @return $target-size / $parent-size * 100%;
     }

     $main-content: calculate-percentage(600px, 960px);

     .main-content {
       width: $main-content;
     }

     .sidebar {
       width: calculate-percentage(300px, 960px);
     }

     /* Compiles to: */

     .main-content {
       width: 62.5%;
     }

     .sidebar {
       width: 31.25%;
     }

     /* Extend (Inheritance)
     ============================== */

     /* Extend is a way to share the properties of one selector with another. */

     .display {
         @include size(5em, 5em);
         border: 5px solid $secondary-color;
     }

     .display-success {
         @extend .display;
         border-color: #22df56;
     }

     /* Compiles to: */
     .display, .display-success {
       width: 5em;
       height: 5em;
       border: 5px solid #51527F;
     }

     .display-success {
       border-color: #22df56;
     }

     /* Extending a CSS statement is preferable to creating a mixin
        because of the way Sass groups together the classes that all share
        the same base styling. If this was done with a mixin, the width,
        height, and border would be duplicated for each statement that
        called the mixin. While it won't affect your workflow, it will
        add unnecessary bloat to the files created by the Sass compiler. */

     /* Nesting
     ============================== */

     /* Sass allows you to nest selectors within selectors */

     ul {
         list-style-type: none;
         margin-top: 2em;

         li {
             background-color: #FF0000;
         }
     }

     /* '&' will be replaced by the parent selector. */
     /* You can also nest pseudo-classes. */
     /* Keep in mind that over-nesting will make your code less maintainable.
     Best practices recommend going no more than 3 levels deep when nesting.
     For example: */

     ul {
         list-style-type: none;
         margin-top: 2em;

         li {
             background-color: red;

             &:hover {
               background-color: blue;
             }

             a {
               color: white;
             }
         }
     }

     /* Compiles to: */

     ul {
       list-style-type: none;
       margin-top: 2em;
     }

     ul li {
       background-color: red;
     }

     ul li:hover {
       background-color: blue;
     }

     ul li a {
       color: white;
     }

     /* Partials and Imports
     ============================== */

     /* Sass allows you to create partial files. This can help keep your Sass
        code modularized. Partial files should begin with an '_', e.g. _reset.css.
        Partials are not generated into CSS. */

     /* Consider the following CSS which we'll put in a file called _reset.css */

     html,
     body,
     ul,
     ol {
       margin: 0;
       padding: 0;
     }

     /* Sass offers @import which can be used to import partials into a file.
        This differs from the traditional CSS @import statement which makes
        another HTTP request to fetch the imported file. Sass takes the
        imported file and combines it with the compiled code. */

     @import 'reset';

     body {
       font-size: 16px;
       font-family: Helvetica, Arial, Sans-serif;
     }

     /* Compiles to: */

     html, body, ul, ol {
       margin: 0;
       padding: 0;
     }

     body {
       font-size: 16px;
       font-family: Helvetica, Arial, Sans-serif;
     }

     /* Placeholder Selectors
     ============================== */

     /* Placeholders are useful when creating a CSS statement to extend. If you
        wanted to create a CSS statement that was exclusively used with @extend,
        you can do so using a placeholder. Placeholders begin with a '%' instead
        of '.' or '#'. Placeholders will not appear in the compiled CSS. */

     %content-window {
       font-size: 14px;
       padding: 10px;
       color: #000;
       border-radius: 4px;
     }

     .message-window {
       @extend %content-window;
       background-color: #0000ff;
     }

     /* Compiles to: */

     .message-window {
       font-size: 14px;
       padding: 10px;
       color: #000;
       border-radius: 4px;
     }

     .message-window {
       background-color: #0000ff;
     }

     /* Math Operations
     ============================== */

     /* Sass provides the following operators: +, -, *, /, and %. These can
        be useful for calculating values directly in your Sass files instead
        of using values that you've already calculated by hand. Below is an example
        of a setting up a simple two column design. */

     $content-area: 960px;
     $main-content: 600px;
     $sidebar-content: 300px;

     $main-size: $main-content / $content-area * 100%;
     $sidebar-size: $sidebar-content / $content-area * 100%;
     $gutter: 100% - ($main-size + $sidebar-size);

     body {
       width: 100%;
     }

     .main-content {
       width: $main-size;
     }

     .sidebar {
       width: $sidebar-size;
     }

     .gutter {
       width: $gutter;
     }

     /* Compiles to: */

     body {
       width: 100%;
     }

     .main-content {
       width: 62.5%;
     }

     .sidebar {
       width: 31.25%;
     }

     .gutter {
       width: 6.25%;
     }
   #+END_SRC
